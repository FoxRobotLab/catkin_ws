"""
DataLabelling2022.py
Created July 2022
Author: Bea Bautista

This file is used to assign a cell number, heading number, and x y location for each timestamped frame
created in collectData2022.py based on the logs created by walkAndTimestamp2022.py
recorded during the same single data collection run on Cutie. Saves the information for each frame into a new text file.

"""
from paths import dataLocLogs, data2022
import os
import datetime

class DataLabeller():

    def __init__(self, locLogFile, framesFolder, outputFileName):
        """
        :param locLogFile: Name of the text file from a single data collection run created by walkAndTimestamp2022.py
        :param framesFolder: Name of the frames folder from a single data collection run created by collectData2022.py
        :param outputFileName: Name of the outputted text file that labels each frame with the closest corresponding
        log data from the same data collection run
        """
        #Path to log txt file created by walkAndTimestamp2022.py
        self.locLogFile = dataLocLogs + locLogFile

        #Path to frames folder created by collectData2022.py
        self.framesPath = data2022 + framesFolder

        #Output txt file information
        self.outputFileName = outputFileName
        self.outputFilePath = data2022 + outputFileName

        #Dicts with time objects for keys, used to compare the log and frame time order
        self.logData = {}
        self.frameTimes = {}

        #Dicts with frame numbers for keys
        self.cellFrames = {}
        self.headingFrames = {}
        self.allFrameData = {}


    def readLogFile(self):
        """
        Reads in the log file created in walkAndTimestamp2022.py, saving the log information to
        dictionary self.logData
        """
        with open(self.locLogFile) as frameData:
            for line in frameData:
                splitList = line.split()
                timeStamp = splitList[1]
                formatTime = datetime.datetime.strptime(timeStamp, "%Y%m%d-%H:%M:%S")
                xVal = float(splitList[2])
                yVal = float(splitList[3])
                headingNum = int(splitList[4])
                cellNum = int(splitList[5])
                loc = (xVal, yVal)
                self.logData[formatTime] = {'loc': loc, 'cell': cellNum, 'heading': headingNum, 'timestamp': timeStamp, 'time': formatTime}


    def readFrameNames(self):
        """
        Reads the frame names of each image in the frames folder generated by collectData2022.py
        Saves the frame names to self.frameTimes with time objects per frame as keys and corresponding
        frame name for values
        """
        frameNames = os.listdir(self.framesPath)
        for frame in frameNames:
            timeStamp = frame.replace(".jpg", "").replace("frame", "")
            formatTime = datetime.datetime.strptime(timeStamp, "%Y%m%d-%H:%M:%S")
            self.frameTimes[formatTime] = frame


    def mapLogsandFrames(self):
        """
        Pairs frames with corresponding log data (cell number, xy location, heading number) from the same
        data collection run by assigning the timestamped frame to the next closest timestamped log entry.
        Saves frame name (key) and cell number (value) to dictionary self.cellFrames
        Saves frame name (key) and heading number (value) to dictionary self.headingFrames
        Saves frame name (key) and all corresponding log information (value) to dictionary self.allFrameData
        """
        frameTimestamps = sorted(list(self.frameTimes.keys()))
        logTimestamps = sorted(list(self.logData.keys()))

        logIndx = 0
        for frameTime in frameTimestamps:
            prevLogTime = logTimestamps[logIndx]
            nextLogTime = logTimestamps[logIndx + 1]
            midpointPrevNext = nextLogTime - prevLogTime
            diffPrevTime = abs(frameTime - prevLogTime)
            diffNextTime = abs(frameTime - nextLogTime)
            if frameTime > prevLogTime + midpointPrevNext:
                if logIndx + 1 < len(logTimestamps) - 1:
                    logIndx += 1

            if diffPrevTime < diffNextTime:
                logTime = prevLogTime
            else:
                logTime = nextLogTime

            frameName = self.frameTimes.get(frameTime, -1)
            logInfo = self.logData.get(logTime, -1)
            self.allFrameData[frameName] = logInfo

            cellNum = logInfo.get('cell', -1)
            self.cellFrames[frameName] = cellNum

            headingNum = logInfo.get('heading', -1)
            self.headingFrames[frameName] = headingNum


    def writeData(self):
        """Write the log data per frame to a timestamped file."""
        print(self.outputFileName)
        fileOpen = False
        logFile = None
        try:
            logFile = open(self.outputFilePath, 'w')
            fileOpen = True
        except:
            print("FAILED TO OPEN DATA FILE")
        for frame in self.allFrameData:
            frameData = self.allFrameData.get(frame, -1)
            cellNum = frameData.get('cell', -1)
            headingNum = frameData.get('heading', -1)
            loc = frameData.get('loc', "-1 -1")
            timestamp = frameData.get('timestamp', -1)
            dataStr = frame + " " + str(loc[0]) + " " + str(loc[1]) + " " + str(cellNum) + " " + str(headingNum) + " " + timestamp + "\n"
            if fileOpen:
                logFile.write(dataStr)
        logFile.close()


    def buildDicts(self):
        """Reads the text file logs created by walkAndTimestamp2022.py, and frame names created by collectData2022.py
        and initializes all dictionaries"""
        self.readLogFile()
        self.readFrameNames()
        self.mapLogsandFrames()


def removeParenthesis(readFilePath, writeFilePath):
        logFile = open(readFilePath, 'r')
        writeFile = open(writeFilePath, 'w')

        for line in logFile:
            copyLine = line
            copyLine = copyLine.replace("(", "").replace(")", "").replace(",", "")
            print(copyLine)
            print(line)
            writeFile.write(copyLine)
        writeFile.close()
        logFile.close()

if __name__ == '__main__':
    # dataJoin = DataLabeller(locLogFile= 'Data-Jul06Wed-15:29:08.txt', framesFolder= '20220706-15:18frames', outputFileName= 'FrameData-20220706-15:18frames')
    # dataJoin.buildDicts()
    # dataJoin.writeData()

    # dataJoin = DataLabeller(locLogFile= 'Data-Jul05Tue-16:35:53.txt', framesFolder= '20220705-16:16frames', outputFileName= 'FrameDataTESTMIDPOINT-20220705-16:16frames')
    # dataJoin.buildDicts()
    # dataJoin.writeData()

    dataJoin = DataLabeller(locLogFile= 'Data-Jul112022-11:55:09.txt', framesFolder= '20220711-11:16frames', outputFileName= 'FrameData-20220711-11:16frames')
    dataJoin.buildDicts()
    dataJoin.writeData()


    # removeParenthesis('/home/macalester/PycharmProjects/catkin_ws/src/match_seeker/res/classifier2022Data/FrameData-20220705-16:16frames.txt', '/home/macalester/PycharmProjects/catkin_ws/src/match_seeker/res/classifier2022Data/FrameData-20220705-16:16framesClean.txt')











